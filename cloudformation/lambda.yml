AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda function to test Lamba + EFS + VPC + S3
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - arn:aws:lambda:us-east-1::*:*
              - arn:aws:states:us-east-1::*:*
          - Effect: Allow
            Action:
              - sts:StartExecution
            Resource:
              - arn:aws:states:us-east-1::*:*
          - Effect: Allow
            Action:
              - cloudwatch:*
            Resource:
              - arn:aws:cloudwatch:us-east-1::*:*
          - Effect: Allow
            Action:
              - s3:*
            Resource: '*'
          - Effect: Allow
            Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
            Resource: '*'
          - Effect: Allow
            Action:
              - elasticfilesystem:ClientMount
              - elasticfilesystem:ClientRootAccess
              - elasticfilesystem:ClientWrite
              - elasticfilesystem:DescribeMountTargets
            Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonElasticFileSystemClientReadWriteAccess
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      FileSystemConfigs: 
        - Arn: !ImportValue "MyEFS"
          LocalMountPath: /mnt/myefs
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue "MyVPC-sg"
        SubnetIds:
          - !ImportValue "MyVPC-priv-sub-a"
          - !ImportValue "MyVPC-priv-sub-b"
      Code:
        ZipFile: |
          'use strict';

          const AWS = require('aws-sdk')
          const s3 = new AWS.S3();

          const exec = require('child_process').exec;
          const fs = require('fs');

          const ping = function (url) {
              return new Promise((resolve, reject) => {
                  const lib = url.startsWith('https') ? require('https') : require('http');
                  const request = lib.get(url, (response) => {
                      resolve(response.statusCode);
                  });
                  request.on('error', (err) => reject(err))
              })
          };

          const s3 = getAwsS3();

          const getFromS3 = (fileName) => {
            const params = {
                Bucket : 'lambda-vpc-efs-test',
                Key    : fileName
            }

            s3.getObject(params, (err, data) => {
                if (err) console.error(err);
                console.log('@ getFromS3 @', data);
            });
          }

          const saveToS3 = (fileName, source) => {
            var params = {
                  ACL         : "public-read",
                  Bucket      : 'lambda-vpc-efs-test',  
                  Key         : fileName,
                  Body        : fs.readFileSync(source),
                  ContentType : "application/text"
              };

              const options = {
                  partSize  : 10 * 1024 * 1024,
                  queueSize : 1,
                  computeChecksums : false,
                  disableChunkedEncoding : true
              };

              s3.upload(params, options, (err, data) => {
                  if (err) throw err;
                  console.log('saveToS3', {
                      result : 'SUCCESS',
                      url    : data.Location,
                      key    : params.Key
                  })
              });
          }

          exports.handler = async (event, context) => {
              console.log('@ EVENT @', event);
              console.log('@ CONTEXT @', context);

              const kMNT_PATH = event.mountPath;

              try {
                  const content = await ping( 'https://www.google.com' );
                  console.log(
                      content === 200 
                      ? 'SUCCESS! You have access to the internet' 
                      : 'DOH! You do not have internet access', 
                      `HTTP Reponse code ${content}`
                  );

                  return {
                      statusCode: 200,
                      body: JSON.stringify((() => {
                          try {
                              fs.writeFileSync(`${kMNT_PATH}/test.txt`, 'Testing 1,2,3', 'utf-8');
                              saveToS3('test.txt', `${kMNT_PATH}/test.txt`);
                              getFromS3('test.txt');
                              return {
                                  exists  : fs.existsSync(kMNT_PATH),
                                  isdir   : fs.lstatSync(kMNT_PATH).isDirectory(),
                                  readdir : fs.readdirSync(kMNT_PATH)
                              };
                          } 
                          catch (e) {
                              return {
                                  error: e.toString()
                              }
                          }
                      })()),
                  };
              } 
              catch (e) {
                  console.error(e);
                  return {
                      statusCode: 500,
                      body: JSON.stringify({
                          message: e.toString(),
                      }),
                  };
              }
          }
      Description: Test Lambda + EFS + VPC + S3
      TracingConfig:
        Mode: Active